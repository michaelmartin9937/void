---
import { Icon } from "astro-icon";

// components
import NavLink from "@components/Nav/NavLink.astro";
import { type navDropdownItem } from "@config/navData.json";

interface Props {
  navItem: navDropdownItem;
}

const { navItem } = Astro.props as Props;
---

<!-- non-mobile dropdown menu -->
<div class="nav__dropdown group relative">
  <button
    class="primary-focus nav__dropdown-button hidden w-full items-center gap-1 px-2 py-1 font-medium text-base-950 transition hover:text-primary-600 md:flex dark:text-base-50 dark:hover:text-primary-400"
    type="button"
    id={`${navItem.text} dropdown menu`}
    aria-expanded="false"
    aria-haspopup="true"
    aria-controls={`${navItem.text} dropdown menu content`}
  >
    {navItem.text}
    <Icon
      name="tabler:chevron-down"
      aria-hidden="true"
      class="nav__dropdown-chevron h-5 w-5 shrink-0 transition-transform"
    />
  </button>
  <div
    id={`${navItem.text} dropdown menu content`}
    aria-labelledby={`${navItem.text} dropdown menu`}
    class="nav__dropdown-content absolute left-0 z-10 hidden"
  >
    <ul
      class="mt-4 flex w-fit min-w-[150px] max-w-xs flex-col gap-0.5 whitespace-nowrap rounded-md border border-solid border-base-400/60 bg-base-100 p-1 drop-shadow-md dark:border-base-600 dark:bg-base-800"
    >
      {
        navItem.dropdown.map((dropdownItem) => (
          <NavLink navItem={dropdownItem} class="w-full" />
        ))
      }
    </ul>
  </div>
</div>

<style lang="scss">
  .dropdown--fade-in {
    animation: navDropdownFadeInAnimation ease-out 0.15s forwards;
    @apply block;
  }

  @keyframes navDropdownFadeInAnimation {
    0% {
      @apply top-[90%] opacity-0;
    }
    100% {
      @apply top-full opacity-100;
    }
  }
</style>

<script>
  function dropdownToggleSetup() {
    const dropdownMenus = document.querySelectorAll(".nav__dropdown");
    dropdownMenus.forEach((dropdownMenu) => {
      const dropdownButton = dropdownMenu.querySelector(
        ".nav__dropdown-button",
      );
      const dropdownChevron = dropdownMenu.querySelector(
        ".nav__dropdown-chevron",
      );
      const dropdownContent = dropdownMenu.querySelector(
        ".nav__dropdown-content",
      );
      if (dropdownButton && dropdownContent && dropdownChevron) {
        dropdownButton.addEventListener("click", (event) => {
          if (!dropdownMenu.classList.contains("active")) {
            // if dropdown is currently closed, so open it
            dropdownMenu.classList.add("active");
            dropdownButton.setAttribute("aria-expanded", "true");
            dropdownContent.classList.add("dropdown--fade-in");
            dropdownChevron.classList.add("rotate-180");
          } else {
            // dropdown is currently open, so close it
            dropdownMenu.classList.remove("active");
            dropdownButton.setAttribute("aria-expanded", "false");
            dropdownContent.classList.remove("dropdown--fade-in");
            dropdownChevron.classList.remove("rotate-180");
          }
          event.preventDefault();
          return false;
        });

        // if dropdown menu is open and there is a click outside it, close the menu
        document.addEventListener("click", (event) => {
          if (
            !dropdownMenu.contains(event.target as Node) &&
            dropdownMenu.classList.contains("active")
          ) {
            dropdownMenu.classList.remove("active");
            dropdownButton.setAttribute("aria-expanded", "false");
            dropdownContent.classList.remove("dropdown--fade-in");
            dropdownChevron.classList.remove("rotate-180");
          }
        });
      }
    });
  }

  // runs on initial page load
  dropdownToggleSetup();

  // runs on view transitions navigation
  document.addEventListener("astro:after-swap", dropdownToggleSetup);
</script>
